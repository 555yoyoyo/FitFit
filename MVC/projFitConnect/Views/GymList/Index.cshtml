@{
}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    @section Styles {
        <style>
        .card {
            width: 100%;
            max-width: 500px; 
        }

        .con {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
        }
        .card-text{
            font-size:14px;
        }
        .imgsize{
            max-height: 150px;
            object-fit: cover;
        }
        #map{
            height: 500px; 
            width: 70%;
            margin-top:20px;
        }
        </style>
    }
<body>
    <div style="padding-top:120px"></div>
    <main>
        <div class="my-3">
        <form class="d-flex float-start" role="search" id="searchForm">
            <input type="search" class="form-control me-2" aria-label="Search" placeholder="找健身房" id="inputSearch" />
        </form>
        <div class="d-flex">
                <select class="w-100 mx-3 px-3 rounded-3 form-select" name="city" id="citys" onchange="loadRegions()">
                    <option>請選擇縣市</option>
                </select>
                <select class="w-100 mx-3 px-3 rounded-3 form-select" name="course" id="regions" onchange="filterGymsByRegion()">
                    <option>請選擇地區</option>
                </select>
            </div>
    </div>
    <div class="d-flex flex-row">
    <div id="results" class="mt-3" style="width:800px;"></div>
    <div id="map"></div>
    </div>
    <div id="pagination" class="mt-3"></div>
    </main>
    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDojyBquKtQGtbYRSgwM8Upzj2yVkDY92s&callback=initMap" async defer></script>
        <script>
            let map;
            let geocoder;
            let currentPage = 1;
            const itemsPerPage = 4;
            let gymData = [];
            let allData = [];
            let markers = [];
            //載入地圖標記
            async function initMap() {
                const center = { lat: 25.05479615296504, lng: 121.48801693439103 };
                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 12,
                    center: center
                });
                geocoder = new google.maps.Geocoder();

                const response = await fetch("https://localhost:7199/api/GymList");
                gymData = await response.json();

                //console.log('Fetched gym data:', gymData); //檢查場館API回傳資料

                renderCards(gymData);
                renderMarkers(gymData);
                renderPagination(gymData);
            }

            // 載入所有場館
            function renderCards(data) {
                const div = document.getElementById("results");
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const slicedData = data.slice(startIndex, endIndex);
                let str = '';
                slicedData.forEach(item => {
                    str += `
                                            <div class="card mb-3">
                                                <div class="row g-0">
                                                    <div class="col-md-5">
                                                        <img src="data:image/png;base64,${item.gymPhoto}" class="img-fluid rounded-start imgsize">
                                                    </div>
                                                    <div class="col-md-7">
                                                        <div class="card-body">
                                                        <a href="../gym?id=${item.gymId}" onclick="openGymDetails(event, '${item.gymId}')"><h5><b>${item.gymName}</b></h5></a>
                                                            <p class="card-text"><b>營業時間:</b> ${item.gymTime}</p>
                                                            <p class="card-text"><b>地址:</b> ${item.gymAddress}</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        `;
                });
                div.innerHTML = str;
                //console.log(item.gymId); //檢查場館ID
            }

            // 分頁按鈕
            function renderPagination(data) {
                const numPages = Math.ceil(data.length / itemsPerPage);
                const pagination = document.getElementById("pagination");
                let str = '<ul class="pagination justify-content-center">';
                str += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" onclick="changePage(event,currentPage - 1)" aria-label="Previous"><span aria-hidden="true">&laquo;</span></a></li>`;
                for (let i = 1; i <= numPages; i++) {
                    str += `<li class="page-item ${currentPage === i ? 'active' : ''}"><a class="page-link" href="#" onclick="changePage(event, ${i})">${i}</a></li>`;
                }
                str += `<li class="page-item ${currentPage === numPages ? 'disabled' : ''}"><a class="page-link" href="#" onclick="changePage(event, currentPage + 1)" aria-label="Next"><span aria-hidden="true">&raquo;</span></a></li>`;
                str += '</ul>';
                pagination.innerHTML = str;
            }

            // 地圖抓場館地址並標記
            async function geocodeAddress(item) {
                geocoder.geocode({ 'address': item.gymAddress }, function (results, status) {
                    if (status === 'OK') {
                        const marker = new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });

                        marker.addListener('click', function () {
                            const content = `
                                                    <div>
                                                      <h5><b>${item.gymName}</b></h5>
                                                        <div>
                                                            <img src="data:image/png;base64,${item.gymPhoto}" class="img-fluid rounded-start imgsize">
                                                        </div>
                                                        <div class="mt-2">
                                                            <p class="card-text"><b>營業時間:</b> ${item.gymTime}</p>
                                                            <p class="card-text"><b>地址:</b> ${item.gymAddress}</p>
                                                        </div>
                                                    </div>
                                                `;
                            const infoWindow = new google.maps.InfoWindow({
                                content: content
                            });
                            infoWindow.open(map, marker);
                        });
                    } else {
                        console.error('Geocode was not successful for the following reason: ' + status);
                    }
                });
            }

            async function renderMarkers(data) {
                return new Promise((resolve, reject) => {
                    // 移除地圖標記
                    markers.forEach(marker => marker.setMap(null));
                    markers = [];

                    if (!data || data.length === 0) {
                        resolve();
                        return;
                    }

                    // 讀取地址並新增地圖標記
                    const markerPromises = data.map(item => {
                        return new Promise((resolve, reject) => {
                            geocoder.geocode({ 'address': item.gymAddress }, function (results, status) {
                                if (status === 'OK') {
                                    const marker = new google.maps.Marker({
                                        map: map,
                                        position: results[0].geometry.location
                                    });

                                    marker.addListener('click', function () {
                                        const content = `
                                            <div>
                                                <h5><b>${item.gymName}</b></h5>
                                                <div>
                                                    <img src="data:image/png;base64,${item.gymPhoto}" class="img-fluid rounded-start imgsize">
                                                </div>
                                                <div class="mt-2">
                                                    <p class="card-text"><b>營業時間:</b> ${item.gymTime}</p>
                                                    <p class="card-text"><b>地址:</b> ${item.gymAddress}</p>
                                                </div>
                                            </div>
                                        `;
                                        const infoWindow = new google.maps.InfoWindow({
                                            content: content
                                        });
                                        infoWindow.open(map, marker);
                                    });

                                    markers.push(marker);
                                    resolve(marker);
                                } else {
                                    console.error('Geocode was not successful for the following reason: ' + status);
                                    reject(new Error('Geocode was not successful'));
                                }
                            });
                        });
                    });

                    Promise.all(markerPromises)
                        .then(() => resolve())
                        .catch(error => reject(error));
                });
            }

            // 換頁
            function changePage(event, page) {
                event.preventDefault(); // 阻止默認行為
                const numPages = Math.ceil(gymData.length / itemsPerPage);
                if (page > 0 && page <= numPages) {
                    currentPage = page;
                    renderCards(gymData);
                    renderPagination(gymData);
                }
            }

            // 搜尋場館
            document.getElementById('searchForm').addEventListener('submit', function (event) {
                event.preventDefault();
                const query = document.getElementById('inputSearch').value.trim().toLowerCase();
                const filteredData = gymData.filter(item =>
                    item.gymName.toLowerCase().includes(query) || item.gymAddress.toLowerCase().includes(query)
                );
                currentPage = 1;
                renderCards(filteredData);
                renderPagination(filteredData);
                renderMarkers(filteredData).then(() => {
                //    console.log("Markers rendered successfully."); //檢查地圖標誌功能
                }).catch(error => {
                    console.error("Error rendering markers:", error);
                });
            });
            
            // 載入縣市
            async function loadCitiesWithGyms() {
                const citySelect = document.getElementById('citys');
                try {
                    const response = await fetch("https://localhost:7199/api/Region");
                    allData = await response.json();
                    const uniqueCities = new Set();

                    //console.log('Fetched region data:', allData); //檢查縣市讀取

                    // 過濾出至少有一個場館的城市
                    allData.forEach(item => {
                        if (!uniqueCities.has(item.city) && item.gymId !== 0) {
                            uniqueCities.add(item.city);
                            const option = document.createElement('option');
                            option.value = item.city;
                            option.textContent = item.city;
                            citySelect.appendChild(option);
                        }
                    });
                } catch (error) {
                    console.error("Error fetching data:", error);
                }
            }
            // 載入地區
            async function loadRegions() {
                const regions = document.getElementById('regions');
                const citys = document.getElementById('citys');
                const selectedCity = citys.value;

                let regionOptions = '<option>請選擇地區</option>';
                const filteredRegions = allData.filter(item => item.city === selectedCity && item.gymId !== 0);
                filteredRegions.forEach(item => {
                    regionOptions += `<option value="${item.region}">${item.region}</option>`;
                });

                regions.innerHTML = regionOptions;
            }

            // 根據選定地區過濾場館
            async function filterGymsByRegion() {
                const selectedRegion = document.getElementById('regions').value;
                console.log('Selected region:', selectedRegion); // Debugging selected region

                const filteredGyms = gymData.filter(item => item.region === selectedRegion);
                console.log('Filtered gyms:', filteredGyms); // Debugging filtered gyms

                currentPage = 1;
                renderCards(filteredGyms);
                renderPagination(filteredGyms);
                await renderMarkers(filteredGyms);
            }
            //載入有場館的縣市
            document.addEventListener('DOMContentLoaded', () => {
                loadCitiesWithGyms();
            });
        </script>
    }
</body>

